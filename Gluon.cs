//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Gluon : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Gluon(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Gluon obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Gluon() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          gluon_ikPINVOKE.delete_Gluon(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static double rad(double degree) {
    double ret = gluon_ikPINVOKE.Gluon_rad(degree);
    return ret;
  }

  public static double deg(double radian) {
    double ret = gluon_ikPINVOKE.Gluon_deg(radian);
    return ret;
  }

  public static SWIGTYPE_p_Matrix4d poseTotrans(double euler_x, double euler_y, double euler_z, double x, double y, double z) {
    SWIGTYPE_p_Matrix4d ret = new SWIGTYPE_p_Matrix4d(gluon_ikPINVOKE.Gluon_poseTotrans(euler_x, euler_y, euler_z, x, y, z), true);
    return ret;
  }

  public static DoubleVector2d IkSolver(SWIGTYPE_p_Matrix4d T70) {
    DoubleVector2d ret = new DoubleVector2d(gluon_ikPINVOKE.Gluon_IkSolver(SWIGTYPE_p_Matrix4d.getCPtr(T70)), true);
    if (gluon_ikPINVOKE.SWIGPendingException.Pending) throw gluon_ikPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DoubleVector findNearestSolution(DoubleVector2d solutions, DoubleVector angles_now) {
    DoubleVector ret = new DoubleVector(gluon_ikPINVOKE.Gluon_findNearestSolution(DoubleVector2d.getCPtr(solutions), DoubleVector.getCPtr(angles_now)), true);
    if (gluon_ikPINVOKE.SWIGPendingException.Pending) throw gluon_ikPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Gluon() : this(gluon_ikPINVOKE.new_Gluon(), true) {
  }

}
